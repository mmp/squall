name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22', '1.23']
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        lfs: false

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      shell: bash
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build
      run: go build -v ./...

    - name: Build cmd/gribinfo
      run: go build -v ./cmd/gribinfo

    - name: Build cmd/benchmark
      run: go build -v ./cmd/benchmark

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        lfs: false

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Get wgrib2 latest commit hash
      id: wgrib2-version
      run: |
        WGRIB2_COMMIT=$(git ls-remote https://github.com/NOAA-EMC/wgrib2.git HEAD | cut -f1)
        echo "commit=$WGRIB2_COMMIT" >> $GITHUB_OUTPUT
        echo "wgrib2 latest commit: $WGRIB2_COMMIT"

    - name: Cache wgrib2
      id: cache-wgrib2
      uses: actions/cache@v4
      with:
        path: ~/wgrib2
        key: wgrib2-${{ runner.os }}-${{ steps.wgrib2-version.outputs.commit }}

    - name: Build wgrib2 from source (minimal build)
      if: steps.cache-wgrib2.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake gcc gfortran make
        # Clone wgrib2
        git clone https://github.com/NOAA-EMC/wgrib2.git $HOME/wgrib2-src
        cd $HOME/wgrib2-src
        # Create build directory
        mkdir build && cd build
        # Configure with CMake (minimal build without optional deps)
        cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/wgrib2
        # Build
        make -j$(nproc)
        # Install to cache directory
        make install
        # Verify the build
        $HOME/wgrib2/bin/wgrib2 -version

    - name: Add wgrib2 to PATH
      run: echo "$HOME/wgrib2/bin" >> $GITHUB_PATH

    - name: Download test GRIB2 file from NOAA
      run: |
        mkdir -p testgribs
        # Download a small HRRR file from NOAA's GCS bucket (via public HTTP)
        # Using a recent file - adjust date as needed
        curl -f -o testgribs/hrrr-test.grib2 \
          "https://storage.googleapis.com/high-resolution-rapid-refresh/hrrr.20240101/conus/hrrr.t00z.wrfsubhf00.grib2" \
          || echo "Warning: Could not download test file from NOAA"

    - name: Run integration tests
      run: go test -v -run TestIntegration ./...
      continue-on-error: true  # wgrib2 may not support all test files
